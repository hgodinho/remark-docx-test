/**
 * Info about the macros for available ctan packages. `latex2e` contains
 * the standard macros for LaTeX.
 */
export declare const macroInfo: {
    cleveref: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    exam: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    geometry: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    hyperref: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    latex2e: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    makeidx: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    mathtools: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    nicematrix: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    systeme: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    tikz: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    xcolor: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    xparse: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    beamer: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
    multicol: import("@unified-latex/unified-latex-types/dist").MacroInfoRecord;
};
/**
 * Info about the environments for available ctan packages. `latex2e` contains
 * the standard environments for LaTeX.
 */
export declare const environmentInfo: {
    cleveref: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    exam: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    geometry: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    hyperref: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    latex2e: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    makeidx: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    mathtools: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    nicematrix: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    systeme: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    tikz: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    xcolor: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    xparse: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    beamer: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
    multicol: import("@unified-latex/unified-latex-types/dist").EnvInfoRecord;
};
/**
 * ## What is this?
 *
 * Macro/environment definitions and utilities for specific LaTeX packages from CTAN.
 *
 * Note: basic LaTeX macro/environment definitions come from the `latex2e` package, even though
 * this is technically not a CTAN "package".
 *
 * ## When should I use this?
 *
 * If you want information about special functions/macros from particular CTAN packages, or
 * you need to parse special environments.
 *
 * ## Notes
 *
 * By default all macros/environments that are exported get processed. If multiple packages
 * export a macro with the same name, then the later-exported one takes precedence. If two packages
 * export a macro/environment of the same name but with conflicting argument signatures, this can
 * cause issues when another unified-latex package processes arguments positionally. For example,
 * by default `\textbf` takes one argument, but the beamer version of `\textbf` takes two arguments.
 * During HTML conversion, if arguments are referenced positionally, this may cause previously-working
 * code to fail with when beamer macro signatures are used. A workaround is provided: `_renderInfo.namedArguments`.
 * If `_renderInfo.namedArguments` is specified on both the original macro/environment definition
 * **and** the conflicting one, other unified-latex commands can reference arguments by name instead
 * of by position.
 */
//# sourceMappingURL=index.d.ts.map